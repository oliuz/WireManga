<?php namespace ProcessWire;
/*
 * WireManga
 *
 */

class WireManga extends Process {
	public function ___install() {
		parent::___install();
		require_once(__DIR__ . "/WireMangaSetup.php");
		$wmSetup = new WireMangaSetup();
		$wmSetup->install();
	}

	public function ___uninstall() {
		parent::___uninstall();
		if($this->input->wm_clean_up){
			require_once(__DIR__ . "/WireMangaSetup.php");
			$wmSetup = new WireMangaSetup();
			$wmSetup->uninstall();
		}
	}


	protected function processSettings() {
		if($this->wire("input")->post->submit) {
			$sanitizer = $this->wire("sanitizer");
			$site_email = $this->wire("input")->post->wm_site_email;
			if($site_email && $site_email !== $sanitizer->email($site_email)) {
				return $this->error("Email is not valid!");
			}

			$site_name = $this->wire("input")->post->wm_site_name;
			if($site_name && $site_name !== $sanitizer->text($site_name)) {
				return $this->error("Site name is not valid!");
			}

			$user_activate = $this->wire("input")->post->wm_user_activate;
			if($user_activate && $user_activate != 0 && $user_activate != 1) {
				return $this->error("Site name is not valid!");
			}

	 		$data['wm_site_email'] = $site_email;
	 		$data['wm_site_name'] = $site_name;
	 		$data['wm_user_activate'] = $user_activate;
			$this->wire("modules")->saveConfig("WireManga", $data);
			$this->wire("session")->redirect("./");
		}
	}


	public function ready() {
		require_once('Reader.php');
		$page = $this->wire("page");
		$this->wire("manga", $this);
		$settings = $this->wire("pages")->get("path=/settings/");
		$this->wire("settings", $settings);
		if(true) {
			$reader = new WireMangaReader($this->input->urlSegment1);
			$this->wire("reader", $reader);
		}
	}


	public function latestChapters($limit) {
		$chapters = $this->wire("pages")->find("template=wm_chapters,sort=-created, limit={$limit}");
		$out = "<div class='wm-chapters-list'>";
		foreach($chapters as $c) {
			$out .= "<a href='{$c->url}' class='' title='{$c->parent->title}: Chapter {$c->title} ({$c->wm_chapter_name})'>{$c->parent->title} {$c->title}</a>";
		}
		$out .= "</div>";
		return $chapters;
	}

	public function getChapters($pageID = null) {
		if($pageID === null) {
			$chapters = $this->wire("page")->wm_chapters->sort('name');
		}
		else {
			$p = $this->wire('pages')->get("id={$pageID}");
			$chapters = $p->wm_chapters->sort('name');
		}
		$chArray = [];
		$x = 0;
		foreach($chapters as $c) {
			$chArray[$c->wm_chapter_volume][$c->title] = $c->chapterName;
		}
		return $chArray;
	}


	public function chaptersList($page, $header, $classes) {
		// set default classes
		if(empty($classes)){
			$wrapperClass        = "manga--chapters";
			$volumeClass         = "manga--volume";
			$volumeHeaderClass   = "manga--volume-header";
			$volumeChaptersClass = "manga--volume-chapters";
			$chapterClass        = "manga--chapter";
			$chapterLinkClass    = "manga--chapter-link";
		}
		// set user defined classes
		else {
			$wrapperClass        = $classes["wrapperClass"];
			$volumeClass         = $classes["volumeClass"];
			$volumeHeaderClass   = $classes["volumeHeaderClass"];
			$volumeChaptersClass = $classes["volumeChaptersClass"];
			$chapterClass        = $classes["chapterClass"];
			$chapterLinkClass    = $classes["chapterLinkClass"];
		}
		$volOrder = '';
		$chOrder  = '';
		if($page->sortChapters == "2") {
			$volOrder = '-';
		}
		if($page->sortChapters == "3") {
			$volOrder = '-';
			$chOrder  = '-';
		}
		$chapters = $page->children->sort("{$chOrder}name");
		$start = "{$header}<div class='{$wrapperClass}'>";
		$prevChapter = "";
		$out = "";
		$x = 0;
		foreach($chapters->sort("{$volOrder}wm_chapter_volume") as $c) {
			if($c->wm_chapter_images->count === 0) {
				continue;
			}
			$volumeNumber = $c->wm_chapter_volume ? $c->wm_chapter_volume : "n/a";
			$currentChapter = $c->wm_chapter_volume;
			$volContainer = "";
			if($currentChapter != $prevChapter) {
				$volContainerClose = ($x == 0) ? "" : "</div></div>";
				$volContainer  = "{$volContainerClose}<div class='{$volumeClass}'>";
				$volContainer .= "<div class='{$volumeHeaderClass}'>Volume {$volumeNumber}</div>";
				$volContainer .= "<div class='{$volumeChaptersClass}'>";
			}
			$chname = ($c->wm_chapter_name) ? " - {$c->wm_chapter_name}" : "";

			$out .= $volContainer;
			$out .= "<div class='{$chapterClass}'><a href='{$c->url}' class='{$chapterLinkClass}'>Chapter {$c->title}{$chname}</a></div>";
			$prevChapter = $currentChapter;
			$x++;
		}
		if($volContainer){
			$out .= "</div></div>";
		}
		$end = "</div>";

		$output = $start . $out . $end;
		return $output;
	}

}
