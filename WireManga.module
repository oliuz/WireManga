<?php namespace ProcessWire;
/*
 * WireManga
 *
 */

class WireManga extends Process {
	public function ___install() {
		parent::___install();
		require_once(__DIR__ . "/WireMangaSetup.php");
		$wmSetup = new WireMangaSetup();
		$wmSetup->install();
	}

	public function ___uninstall() {
		parent::___uninstall();
		if($this->input->wm_clean_up){
			require_once(__DIR__ . "/WireMangaSetup.php");
			$wmSetup = new WireMangaSetup();
			$wmSetup->uninstall();
		}
	}


	public function ready() {
		$page = $this->wire("page");
		// initialize wm variable for use on front end
		$this->wire("wm", $this);
		if($page->template->name == "wm_chapters") {
			require_once('Reader.php');
			// initialize reader variable for use on front end
			$reader = new WireMangaReader($this->input->urlSegment1);
			$this->wire("reader", $reader);
		}
	}

	/** 
	 * Get latest chapters list
	 *
	 * @param int $limit Number of chapters to get
	 *
	 * @return string
	 */
	public function latestChapters($limit) {
		$chapters = $this->wire("pages")->find("template=wm_chapters,sort=-created, limit={$limit}");
		$out = "<div class='wm-chapters-list'>";
		foreach($chapters as $c) {
			$out .= "<a href='{$c->url}' class='' title='{$c->parent->title}: Chapter {$c->title} ({$c->wm_chapter_name})'>{$c->parent->title} {$c->title}</a>";
		}
		$out .= "</div>";
		return $chapters;
	}

	/** 
	 * Get chapters list
	 *
	 * @param Page $page Page (manga) to get chapters from
	 * @param string $header Text to be displayed before the chapters list
	 * @param array $classes Array of classses used in the returned markup
	 *
	 * @return string
	 */
	public function chaptersList($page, $header, $classes) {
		// set default classes
		if(empty($classes)){
			$wrapperClass        = "manga--chapters";
			$volumeClass         = "manga--volume";
			$volumeHeaderClass   = "manga--volume-header";
			$volumeChaptersClass = "manga--volume-chapters";
			$chapterClass        = "manga--chapter";
			$chapterLinkClass    = "manga--chapter-link";
		}
		// set user defined classes
		else {
			$wrapperClass        = $classes["wrapperClass"];
			$volumeClass         = $classes["volumeClass"];
			$volumeHeaderClass   = $classes["volumeHeaderClass"];
			$volumeChaptersClass = $classes["volumeChaptersClass"];
			$chapterClass        = $classes["chapterClass"];
			$chapterLinkClass    = $classes["chapterLinkClass"];
		}
		$volOrder = '';
		$chOrder  = '';
		if($page->sortChapters == "2") {
			$volOrder = '-';
		}
		if($page->sortChapters == "3") {
			$volOrder = '-';
			$chOrder  = '-';
		}
		$chapters = $page->children->sort("{$chOrder}name");
		$start = "{$header}<div class='{$wrapperClass}'>";
		$prevChapter = "";
		$out = "";
		$x = 0;
		foreach($chapters->sort("{$volOrder}wm_chapter_volume") as $c) {
			if($c->wm_chapter_images->count === 0) {
				continue;
			}
			$volumeNumber = $c->wm_chapter_volume ? $c->wm_chapter_volume : "n/a";
			$currentChapter = $c->wm_chapter_volume;
			$volContainer = "";
			if($currentChapter != $prevChapter) {
				$volContainerClose = ($x == 0) ? "" : "</div></div>";
				$volContainer  = "{$volContainerClose}<div class='{$volumeClass}'>";
				$volContainer .= "<div class='{$volumeHeaderClass}'>Volume {$volumeNumber}</div>";
				$volContainer .= "<div class='{$volumeChaptersClass}'>";
			}
			$chname = ($c->wm_chapter_name) ? " - {$c->wm_chapter_name}" : "";

			$out .= $volContainer;
			$out .= "<div class='{$chapterClass}'><a href='{$c->url}' class='{$chapterLinkClass}'>Chapter {$c->title}{$chname}</a></div>";
			$prevChapter = $currentChapter;
			$x++;
		}
		if($volContainer){
			$out .= "</div></div>";
		}
		$end = "</div>";

		$output = $start . $out . $end;
		return $output;
	}

}
